//Length of longest substring without repeating a digit --- O(N) solution

class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        int maxDistance = 0;
        HashMap<Character, Integer> hashMap = new HashMap<>();
        
        int interMax = 0;
        for(int i = 0; i < s.length(); i++)
        {
            Integer lastSeen = hashMap.get(s.charAt(i));
            //if haven't seen it before or not part of current max length
            if(lastSeen == null || i - interMax > lastSeen)
            {
                interMax++;
            }
            else
            {
                if(interMax > maxDistance)
                {
                    maxDistance = interMax;
                }
                //current Max length is one spot after lastSeen to i -- inclusive so don't have to subtract 1
                interMax = i - lastSeen;
            }

            hashMap.put(s.charAt(i), new Integer(i));
        }
        
        return Math.max(maxDistance, interMax);
        
        
    }
}
